
classroom_matrix_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000602  00000696  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000602  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800108  00800108  0000069e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000069e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000108d  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d5  00000000  00000000  00001835  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ce  00000000  00000000  0000220a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  000029d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073c  00000000  00000000  00002b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000892  00000000  00000000  000032b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003b42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	e4 c0       	rjmp	.+456    	; 0x1fe <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e0       	ldi	r30, 0x02	; 2
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 31       	cpi	r26, 0x11	; 17
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	4a d2       	rcall	.+1172   	; 0x558 <main>
  c4:	9c c2       	rjmp	.+1336   	; 0x5fe <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <_Z13TickFct_Lighti>:
		while( !(UCSR0A & (1 << UDRE0)) );
		UDR0 = sendMe;
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
		UDR1 = sendMe;
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	91 05       	cpc	r25, r1
  cc:	39 f5       	brne	.+78     	; 0x11c <_Z13TickFct_Lighti+0x54>
  ce:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <rec_light>
  d2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <light>
  d6:	23 17       	cp	r18, r19
  d8:	29 f0       	breq	.+10     	; 0xe4 <_Z13TickFct_Lighti+0x1c>
  da:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <light>
  de:	2b b1       	in	r18, 0x0b	; 11
  e0:	23 70       	andi	r18, 0x03	; 3
  e2:	2b b9       	out	0x0b, r18	; 11
  e4:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <light>
  e8:	21 11       	cpse	r18, r1
  ea:	04 c0       	rjmp	.+8      	; 0xf4 <_Z13TickFct_Lighti+0x2c>
  ec:	2b b1       	in	r18, 0x0b	; 11
  ee:	23 70       	andi	r18, 0x03	; 3
  f0:	2b b9       	out	0x0b, r18	; 11
  f2:	08 95       	ret
  f4:	20 ff       	sbrs	r18, 0
  f6:	03 c0       	rjmp	.+6      	; 0xfe <_Z13TickFct_Lighti+0x36>
  f8:	2b b1       	in	r18, 0x0b	; 11
  fa:	2c 60       	ori	r18, 0x0C	; 12
  fc:	2b b9       	out	0x0b, r18	; 11
  fe:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <light>
 102:	21 ff       	sbrs	r18, 1
 104:	03 c0       	rjmp	.+6      	; 0x10c <_Z13TickFct_Lighti+0x44>
 106:	2b b1       	in	r18, 0x0b	; 11
 108:	20 63       	ori	r18, 0x30	; 48
 10a:	2b b9       	out	0x0b, r18	; 11
 10c:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <light>
 110:	22 ff       	sbrs	r18, 2
 112:	0b c0       	rjmp	.+22     	; 0x12a <_Z13TickFct_Lighti+0x62>
 114:	2b b1       	in	r18, 0x0b	; 11
 116:	20 6c       	ori	r18, 0xC0	; 192
 118:	2b b9       	out	0x0b, r18	; 11
 11a:	08 95       	ret
 11c:	02 97       	sbiw	r24, 0x02	; 2
 11e:	18 f0       	brcs	.+6      	; 0x126 <_Z13TickFct_Lighti+0x5e>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	08 95       	ret
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	08 95       	ret

0000012c <_Z8TimerISRv>:
 12c:	cf 92       	push	r12
 12e:	df 92       	push	r13
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 13e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tasksNum>
 142:	88 23       	and	r24, r24
 144:	09 f4       	brne	.+2      	; 0x148 <_Z8TimerISRv+0x1c>
 146:	53 c0       	rjmp	.+166    	; 0x1ee <_Z8TimerISRv+0xc2>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	1b e0       	ldi	r17, 0x0B	; 11
 14c:	c0 91 0a 01 	lds	r28, 0x010A	; 0x80010a <tasks>
 150:	d0 91 0b 01 	lds	r29, 0x010B	; 0x80010b <tasks+0x1>
 154:	18 9f       	mul	r17, r24
 156:	c0 0d       	add	r28, r0
 158:	d1 1d       	adc	r29, r1
 15a:	11 24       	eor	r1, r1
 15c:	4d 81       	ldd	r20, Y+5	; 0x05
 15e:	5e 81       	ldd	r21, Y+6	; 0x06
 160:	6f 81       	ldd	r22, Y+7	; 0x07
 162:	78 85       	ldd	r23, Y+8	; 0x08
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	9a 81       	ldd	r25, Y+2	; 0x02
 168:	ab 81       	ldd	r26, Y+3	; 0x03
 16a:	bc 81       	ldd	r27, Y+4	; 0x04
 16c:	48 17       	cp	r20, r24
 16e:	59 07       	cpc	r21, r25
 170:	6a 07       	cpc	r22, r26
 172:	7b 07       	cpc	r23, r27
 174:	b0 f0       	brcs	.+44     	; 0x1a2 <_Z8TimerISRv+0x76>
 176:	88 81       	ld	r24, Y
 178:	e9 85       	ldd	r30, Y+9	; 0x09
 17a:	fa 85       	ldd	r31, Y+10	; 0x0a
 17c:	08 2e       	mov	r0, r24
 17e:	00 0c       	add	r0, r0
 180:	99 0b       	sbc	r25, r25
 182:	09 95       	icall
 184:	88 83       	st	Y, r24
 186:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 18a:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <tasks>
 18e:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <tasks+0x1>
 192:	18 9f       	mul	r17, r24
 194:	e0 0d       	add	r30, r0
 196:	f1 1d       	adc	r31, r1
 198:	11 24       	eor	r1, r1
 19a:	15 82       	std	Z+5, r1	; 0x05
 19c:	16 82       	std	Z+6, r1	; 0x06
 19e:	17 82       	std	Z+7, r1	; 0x07
 1a0:	10 86       	std	Z+8, r1	; 0x08
 1a2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 1a6:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <tasks>
 1aa:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <tasks+0x1>
 1ae:	18 9f       	mul	r17, r24
 1b0:	e0 0d       	add	r30, r0
 1b2:	f1 1d       	adc	r31, r1
 1b4:	11 24       	eor	r1, r1
 1b6:	c5 80       	ldd	r12, Z+5	; 0x05
 1b8:	d6 80       	ldd	r13, Z+6	; 0x06
 1ba:	e7 80       	ldd	r14, Z+7	; 0x07
 1bc:	f0 84       	ldd	r15, Z+8	; 0x08
 1be:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <tasksPeriodGCD>
 1c2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <tasksPeriodGCD+0x1>
 1c6:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <tasksPeriodGCD+0x2>
 1ca:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <tasksPeriodGCD+0x3>
 1ce:	4c 0d       	add	r20, r12
 1d0:	5d 1d       	adc	r21, r13
 1d2:	6e 1d       	adc	r22, r14
 1d4:	7f 1d       	adc	r23, r15
 1d6:	45 83       	std	Z+5, r20	; 0x05
 1d8:	56 83       	std	Z+6, r21	; 0x06
 1da:	67 83       	std	Z+7, r22	; 0x07
 1dc:	70 87       	std	Z+8, r23	; 0x08
 1de:	8f 5f       	subi	r24, 0xFF	; 255
 1e0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 1e4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <tasksNum>
 1e8:	89 17       	cp	r24, r25
 1ea:	08 f4       	brcc	.+2      	; 0x1ee <_Z8TimerISRv+0xc2>
 1ec:	af cf       	rjmp	.-162    	; 0x14c <_Z8TimerISRv+0x20>
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	ff 90       	pop	r15
 1f6:	ef 90       	pop	r14
 1f8:	df 90       	pop	r13
 1fa:	cf 90       	pop	r12
 1fc:	08 95       	ret

000001fe <__vector_13>:
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	11 24       	eor	r1, r1
 208:	0b b6       	in	r0, 0x3b	; 59
 20a:	0f 92       	push	r0
 20c:	2f 93       	push	r18
 20e:	3f 93       	push	r19
 210:	4f 93       	push	r20
 212:	5f 93       	push	r21
 214:	6f 93       	push	r22
 216:	7f 93       	push	r23
 218:	8f 93       	push	r24
 21a:	9f 93       	push	r25
 21c:	af 93       	push	r26
 21e:	bf 93       	push	r27
 220:	ef 93       	push	r30
 222:	ff 93       	push	r31
 224:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <tasksPeriodCntDown>
 228:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <tasksPeriodCntDown+0x1>
 22c:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <tasksPeriodCntDown+0x2>
 230:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <tasksPeriodCntDown+0x3>
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	a1 09       	sbc	r26, r1
 238:	b1 09       	sbc	r27, r1
 23a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <tasksPeriodCntDown>
 23e:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <tasksPeriodCntDown+0x1>
 242:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <tasksPeriodCntDown+0x2>
 246:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <tasksPeriodCntDown+0x3>
 24a:	89 2b       	or	r24, r25
 24c:	8a 2b       	or	r24, r26
 24e:	8b 2b       	or	r24, r27
 250:	89 f4       	brne	.+34     	; 0x274 <__vector_13+0x76>
 252:	6c df       	rcall	.-296    	; 0x12c <_Z8TimerISRv>
 254:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <tasksPeriodGCD>
 258:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <tasksPeriodGCD+0x1>
 25c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <tasksPeriodGCD+0x2>
 260:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <tasksPeriodGCD+0x3>
 264:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <tasksPeriodCntDown>
 268:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <tasksPeriodCntDown+0x1>
 26c:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <tasksPeriodCntDown+0x2>
 270:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <tasksPeriodCntDown+0x3>
 274:	ff 91       	pop	r31
 276:	ef 91       	pop	r30
 278:	bf 91       	pop	r27
 27a:	af 91       	pop	r26
 27c:	9f 91       	pop	r25
 27e:	8f 91       	pop	r24
 280:	7f 91       	pop	r23
 282:	6f 91       	pop	r22
 284:	5f 91       	pop	r21
 286:	4f 91       	pop	r20
 288:	3f 91       	pop	r19
 28a:	2f 91       	pop	r18
 28c:	0f 90       	pop	r0
 28e:	0b be       	out	0x3b, r0	; 59
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <_Z8TimerSetm>:
 29a:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <tasksPeriodGCD>
 29e:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <tasksPeriodGCD+0x1>
 2a2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tasksPeriodGCD+0x2>
 2a6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <tasksPeriodGCD+0x3>
 2aa:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <tasksPeriodCntDown>
 2ae:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <tasksPeriodCntDown+0x1>
 2b2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tasksPeriodCntDown+0x2>
 2b6:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <tasksPeriodCntDown+0x3>
 2ba:	08 95       	ret

000002bc <_Z7TimerOnv>:
 2bc:	8b e0       	ldi	r24, 0x0B	; 11
 2be:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2c2:	8d e7       	ldi	r24, 0x7D	; 125
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2ca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 2d4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2d8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <tasksPeriodGCD>
 2e0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <tasksPeriodGCD+0x1>
 2e4:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <tasksPeriodGCD+0x2>
 2e8:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <tasksPeriodGCD+0x3>
 2ec:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <tasksPeriodCntDown>
 2f0:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <tasksPeriodCntDown+0x1>
 2f4:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <tasksPeriodCntDown+0x2>
 2f8:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <tasksPeriodCntDown+0x3>
 2fc:	8f b7       	in	r24, 0x3f	; 63
 2fe:	80 68       	ori	r24, 0x80	; 128
 300:	8f bf       	out	0x3f, r24	; 63
 302:	08 95       	ret

00000304 <_Z9initUSARTh>:
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	81 f0       	breq	.+32     	; 0x328 <_Z9initUSARTh+0x24>
 308:	e1 ec       	ldi	r30, 0xC1	; 193
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	88 61       	ori	r24, 0x18	; 24
 310:	80 83       	st	Z, r24
 312:	e2 ec       	ldi	r30, 0xC2	; 194
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	86 60       	ori	r24, 0x06	; 6
 31a:	80 83       	st	Z, r24
 31c:	83 e3       	ldi	r24, 0x33	; 51
 31e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 322:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 326:	08 95       	ret
 328:	e9 ec       	ldi	r30, 0xC9	; 201
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	88 61       	ori	r24, 0x18	; 24
 330:	80 83       	st	Z, r24
 332:	ea ec       	ldi	r30, 0xCA	; 202
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	86 60       	ori	r24, 0x06	; 6
 33a:	80 83       	st	Z, r24
 33c:	83 e3       	ldi	r24, 0x33	; 51
 33e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 342:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 346:	08 95       	ret

00000348 <_Z11USART_Flushh>:
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	29 f4       	brne	.+10     	; 0x356 <_Z11USART_Flushh+0xe>
 34c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 350:	88 23       	and	r24, r24
 352:	74 f0       	brlt	.+28     	; 0x370 <_Z11USART_Flushh+0x28>
 354:	08 95       	ret
 356:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 35a:	88 23       	and	r24, r24
 35c:	8c f4       	brge	.+34     	; 0x380 <_Z11USART_Flushh+0x38>
 35e:	a6 ec       	ldi	r26, 0xC6	; 198
 360:	b0 e0       	ldi	r27, 0x00	; 0
 362:	e0 ec       	ldi	r30, 0xC0	; 192
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	8c 91       	ld	r24, X
 368:	80 81       	ld	r24, Z
 36a:	88 23       	and	r24, r24
 36c:	e4 f3       	brlt	.-8      	; 0x366 <_Z11USART_Flushh+0x1e>
 36e:	08 95       	ret
 370:	ae ec       	ldi	r26, 0xCE	; 206
 372:	b0 e0       	ldi	r27, 0x00	; 0
 374:	e8 ec       	ldi	r30, 0xC8	; 200
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	8c 91       	ld	r24, X
 37a:	80 81       	ld	r24, Z
 37c:	88 23       	and	r24, r24
 37e:	e4 f3       	brlt	.-8      	; 0x378 <_Z11USART_Flushh+0x30>
 380:	08 95       	ret

00000382 <_Z13USART_Receiveh>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	41 f0       	breq	.+16     	; 0x396 <_Z13USART_Receiveh+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 386:	e0 ec       	ldi	r30, 0xC0	; 192
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	88 23       	and	r24, r24
 38e:	ec f7       	brge	.-6      	; 0x38a <_Z13USART_Receiveh+0x8>
		return UDR0; // Get and return received data from buffer
 390:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 394:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 396:	e8 ec       	ldi	r30, 0xC8	; 200
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	88 23       	and	r24, r24
 39e:	ec f7       	brge	.-6      	; 0x39a <_Z13USART_Receiveh+0x18>
		return UDR1;
 3a0:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	}
}
 3a4:	08 95       	ret

000003a6 <_Z13TickFct_Usarti>:
	}
}

enum USART_States { USART_Init, Receiving };
int TickFct_Usart(int state) {
	switch(state){ //State Actions
 3a6:	00 97       	sbiw	r24, 0x00	; 0
 3a8:	21 f0       	breq	.+8      	; 0x3b2 <_Z13TickFct_Usarti+0xc>
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	91 05       	cpc	r25, r1
 3ae:	31 f0       	breq	.+12     	; 0x3bc <_Z13TickFct_Usarti+0x16>
 3b0:	1b c0       	rjmp	.+54     	; 0x3e8 <_Z13TickFct_Usarti+0x42>
		case USART_Init:
			initUSART(0);
 3b2:	80 e0       	ldi	r24, 0x00	; 0
			USART_Flush(0);
 3b4:	a7 df       	rcall	.-178    	; 0x304 <_Z9initUSARTh>
 3b6:	80 e0       	ldi	r24, 0x00	; 0
		break;
 3b8:	c7 df       	rcall	.-114    	; 0x348 <_Z11USART_Flushh>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 3ba:	1e c0       	rjmp	.+60     	; 0x3f8 <_Z13TickFct_Usarti+0x52>
 3bc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		
		case Receiving:
			if(USART_HasReceived(0))
			{
				rec_tmp = USART_Receive(0);
 3c0:	88 23       	and	r24, r24
 3c2:	d4 f4       	brge	.+52     	; 0x3f8 <_Z13TickFct_Usarti+0x52>
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	dd df       	rcall	.-70     	; 0x382 <_Z13USART_Receiveh>
 3c8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <rec_tmp>
 3cc:	98 2f       	mov	r25, r24
				if ((rec_tmp & 0xF0) == 0x10)
 3ce:	90 7f       	andi	r25, 0xF0	; 240
 3d0:	90 31       	cpi	r25, 0x10	; 16
				{
					rec_room = (rec_tmp & 0x0F);
 3d2:	21 f4       	brne	.+8      	; 0x3dc <_Z13TickFct_Usarti+0x36>
 3d4:	8f 70       	andi	r24, 0x0F	; 15
 3d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				}
				else if ((rec_tmp & 0xF0) == 0x20)
 3da:	0e c0       	rjmp	.+28     	; 0x3f8 <_Z13TickFct_Usarti+0x52>
 3dc:	90 32       	cpi	r25, 0x20	; 32
				{
					rec_light = (rec_tmp & 0x0F);
 3de:	61 f4       	brne	.+24     	; 0x3f8 <_Z13TickFct_Usarti+0x52>
 3e0:	8f 70       	andi	r24, 0x0F	; 15
 3e2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <rec_light>
		break;
		
		default:
		break;
	}
	switch(state){ //Transactions
 3e6:	08 c0       	rjmp	.+16     	; 0x3f8 <_Z13TickFct_Usarti+0x52>
 3e8:	02 97       	sbiw	r24, 0x02	; 2
		case Receiving:
			state = Receiving;
		break;
		
		default:
			state = USART_Init;
 3ea:	18 f0       	brcs	.+6      	; 0x3f2 <_Z13TickFct_Usarti+0x4c>
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	90 e0       	ldi	r25, 0x00	; 0
		default:
		break;
	}
	switch(state){ //Transactions
		case USART_Init:
			state = Receiving;
 3f0:	08 95       	ret
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	08 95       	ret
 3f8:	81 e0       	ldi	r24, 0x01	; 1
		default:
			state = USART_Init;
		break;
	}
	return state;
};
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	08 95       	ret

000003fe <_Z11showPatternh>:
unsigned char light_tmp = 0;


void showPattern(unsigned char i)
{
	if (i == 1) //tick
 3fe:	81 30       	cpi	r24, 0x01	; 1
 400:	99 f5       	brne	.+102    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
	{
		PORTB = 0x10;
 402:	80 e1       	ldi	r24, 0x10	; 16
 404:	85 b9       	out	0x05, r24	; 5
		PORTA = 0xEF;
 406:	8f ee       	ldi	r24, 0xEF	; 239
 408:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40a:	8f e9       	ldi	r24, 0x9F	; 159
 40c:	9f e0       	ldi	r25, 0x0F	; 15
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 414:	00 00       	nop
		_delay_ms(2);
		PORTB = 0x28;
 416:	88 e2       	ldi	r24, 0x28	; 40
 418:	85 b9       	out	0x05, r24	; 5
		PORTA = 0xF7;
 41a:	87 ef       	ldi	r24, 0xF7	; 247
 41c:	82 b9       	out	0x02, r24	; 2
 41e:	ef e9       	ldi	r30, 0x9F	; 159
 420:	ff e0       	ldi	r31, 0x0F	; 15
 422:	31 97       	sbiw	r30, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 428:	00 00       	nop
		_delay_ms(2);
		PORTB = 0x44;
 42a:	84 e4       	ldi	r24, 0x44	; 68
 42c:	85 b9       	out	0x05, r24	; 5
		PORTA = 0xFB;
 42e:	8b ef       	ldi	r24, 0xFB	; 251
 430:	82 b9       	out	0x02, r24	; 2
 432:	8f e9       	ldi	r24, 0x9F	; 159
 434:	9f e0       	ldi	r25, 0x0F	; 15
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 43c:	00 00       	nop
		_delay_ms(2);
		PORTB = 0x02;
 43e:	82 e0       	ldi	r24, 0x02	; 2
 440:	85 b9       	out	0x05, r24	; 5
		PORTA = 0xFD;
 442:	8d ef       	ldi	r24, 0xFD	; 253
 444:	82 b9       	out	0x02, r24	; 2
 446:	ef e9       	ldi	r30, 0x9F	; 159
 448:	ff e0       	ldi	r31, 0x0F	; 15
 44a:	31 97       	sbiw	r30, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 450:	00 00       	nop
		_delay_ms(2);
		PORTB = 0x01;
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	85 b9       	out	0x05, r24	; 5
		PORTA = 0xFE;
 456:	8e ef       	ldi	r24, 0xFE	; 254
 458:	82 b9       	out	0x02, r24	; 2
 45a:	8f e9       	ldi	r24, 0x9F	; 159
 45c:	9f e0       	ldi	r25, 0x0F	; 15
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 462:	00 c0       	rjmp	.+0      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 464:	00 00       	nop
 466:	08 95       	ret
		_delay_ms(2);
	}
	else if (i == 2) //circle
 468:	82 30       	cpi	r24, 0x02	; 2
 46a:	39 f5       	brne	.+78     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
	{
		PORTB = 0x18;
 46c:	88 e1       	ldi	r24, 0x18	; 24
 46e:	85 b9       	out	0x05, r24	; 5
		PORTA = 0xFD;
 470:	9d ef       	ldi	r25, 0xFD	; 253
 472:	92 b9       	out	0x02, r25	; 2
 474:	ef e9       	ldi	r30, 0x9F	; 159
 476:	ff e0       	ldi	r31, 0x0F	; 15
 478:	31 97       	sbiw	r30, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47e:	00 00       	nop
		_delay_ms(2);
		PORTB = 0x24;
 480:	94 e2       	ldi	r25, 0x24	; 36
 482:	95 b9       	out	0x05, r25	; 5
		PORTA = 0xFB;
 484:	2b ef       	ldi	r18, 0xFB	; 251
 486:	22 b9       	out	0x02, r18	; 2
 488:	ef e9       	ldi	r30, 0x9F	; 159
 48a:	ff e0       	ldi	r31, 0x0F	; 15
 48c:	31 97       	sbiw	r30, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 490:	00 c0       	rjmp	.+0      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 492:	00 00       	nop
		_delay_ms(2);
		PORTB = 0x24;
 494:	95 b9       	out	0x05, r25	; 5
		PORTA = 0xF7;
 496:	97 ef       	ldi	r25, 0xF7	; 247
 498:	92 b9       	out	0x02, r25	; 2
 49a:	ef e9       	ldi	r30, 0x9F	; 159
 49c:	ff e0       	ldi	r31, 0x0F	; 15
 49e:	31 97       	sbiw	r30, 0x01	; 1
 4a0:	f1 f7       	brne	.-4      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a4:	00 00       	nop
		_delay_ms(2);
		PORTB = 0x18;
 4a6:	85 b9       	out	0x05, r24	; 5
		PORTA = 0xEF;
 4a8:	8f ee       	ldi	r24, 0xEF	; 239
 4aa:	82 b9       	out	0x02, r24	; 2
 4ac:	8f e9       	ldi	r24, 0x9F	; 159
 4ae:	9f e0       	ldi	r25, 0x0F	; 15
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4b6:	00 00       	nop
 4b8:	08 95       	ret
		_delay_ms(2);
	}
	else if (i == 3) //cross
 4ba:	83 30       	cpi	r24, 0x03	; 3
 4bc:	81 f5       	brne	.+96     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
	{
		PORTB = 0x44;
 4be:	84 e4       	ldi	r24, 0x44	; 68
 4c0:	85 b9       	out	0x05, r24	; 5
		PORTA = 0xFE;
 4c2:	9e ef       	ldi	r25, 0xFE	; 254
 4c4:	92 b9       	out	0x02, r25	; 2
 4c6:	ef e9       	ldi	r30, 0x9F	; 159
 4c8:	ff e0       	ldi	r31, 0x0F	; 15
 4ca:	31 97       	sbiw	r30, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4d0:	00 00       	nop
		_delay_ms(2);
		PORTB = 0x28;
 4d2:	98 e2       	ldi	r25, 0x28	; 40
 4d4:	95 b9       	out	0x05, r25	; 5
		PORTA = 0xFD;
 4d6:	2d ef       	ldi	r18, 0xFD	; 253
 4d8:	22 b9       	out	0x02, r18	; 2
 4da:	ef e9       	ldi	r30, 0x9F	; 159
 4dc:	ff e0       	ldi	r31, 0x0F	; 15
 4de:	31 97       	sbiw	r30, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4e4:	00 00       	nop
		_delay_ms(2);
		PORTB = 0x10;
 4e6:	20 e1       	ldi	r18, 0x10	; 16
 4e8:	25 b9       	out	0x05, r18	; 5
		PORTA = 0xFB;
 4ea:	2b ef       	ldi	r18, 0xFB	; 251
 4ec:	22 b9       	out	0x02, r18	; 2
 4ee:	ef e9       	ldi	r30, 0x9F	; 159
 4f0:	ff e0       	ldi	r31, 0x0F	; 15
 4f2:	31 97       	sbiw	r30, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4f8:	00 00       	nop
		_delay_ms(2);
		PORTB = 0x28;
 4fa:	95 b9       	out	0x05, r25	; 5
		PORTA = 0xF7;
 4fc:	97 ef       	ldi	r25, 0xF7	; 247
 4fe:	92 b9       	out	0x02, r25	; 2
 500:	ef e9       	ldi	r30, 0x9F	; 159
 502:	ff e0       	ldi	r31, 0x0F	; 15
 504:	31 97       	sbiw	r30, 0x01	; 1
 506:	f1 f7       	brne	.-4      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 508:	00 c0       	rjmp	.+0      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 50a:	00 00       	nop
		_delay_ms(2);
		PORTB = 0x44;
 50c:	85 b9       	out	0x05, r24	; 5
		PORTA = 0xEF;
 50e:	8f ee       	ldi	r24, 0xEF	; 239
 510:	82 b9       	out	0x02, r24	; 2
 512:	8f e9       	ldi	r24, 0x9F	; 159
 514:	9f e0       	ldi	r25, 0x0F	; 15
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	f1 f7       	brne	.-4      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 51c:	00 00       	nop
 51e:	08 95       	ret

00000520 <_Z14TickFct_Matrixi>:
	}
	return state;
};

enum Matrix_States { Matrix_Init, Matrix_Show };
int TickFct_Matrix(int state) {
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	ec 01       	movw	r28, r24
	switch(state){ //State Actions
 526:	81 30       	cpi	r24, 0x01	; 1
 528:	91 05       	cpc	r25, r1
 52a:	59 f4       	brne	.+22     	; 0x542 <_Z14TickFct_Matrixi+0x22>
		case Matrix_Init:
		
		break;
		
		case Matrix_Show:
			if (rec_room != room)
 52c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 530:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <room>
 534:	89 13       	cpse	r24, r25
			{
				room = rec_room;
 536:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <room>
			}
			showPattern(room);
 53a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <room>
 53e:	5f df       	rcall	.-322    	; 0x3fe <_Z11showPatternh>
 540:	07 c0       	rjmp	.+14     	; 0x550 <_Z14TickFct_Matrixi+0x30>
		break;
		
		default:
		break;
	}
	switch(state){ //Transactions
 542:	02 97       	sbiw	r24, 0x02	; 2
 544:	18 f0       	brcs	.+6      	; 0x54c <_Z14TickFct_Matrixi+0x2c>
		case Matrix_Show:
		state = Matrix_Show;
		break;
		
		default:
		state = Matrix_Init;
 546:	c0 e0       	ldi	r28, 0x00	; 0
 548:	d0 e0       	ldi	r29, 0x00	; 0
 54a:	02 c0       	rjmp	.+4      	; 0x550 <_Z14TickFct_Matrixi+0x30>
		default:
		break;
	}
	switch(state){ //Transactions
		case Matrix_Init:
		state = Matrix_Show;
 54c:	c1 e0       	ldi	r28, 0x01	; 1
 54e:	d0 e0       	ldi	r29, 0x00	; 0
		default:
		state = Matrix_Init;
		break;
	}
	return state;
};
 550:	ce 01       	movw	r24, r28
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	08 95       	ret

00000558 <main>:

int main(void) {
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
 55c:	cd b7       	in	r28, 0x3d	; 61
 55e:	de b7       	in	r29, 0x3e	; 62
 560:	a1 97       	sbiw	r28, 0x21	; 33
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	f8 94       	cli
 566:	de bf       	out	0x3e, r29	; 62
 568:	0f be       	out	0x3f, r0	; 63
 56a:	cd bf       	out	0x3d, r28	; 61
	
	// initialize ports
	DDRD = 0xFE;
 56c:	8e ef       	ldi	r24, 0xFE	; 254
 56e:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
 570:	8f ef       	ldi	r24, 0xFF	; 255
 572:	84 b9       	out	0x04, r24	; 4
	DDRA = 0xFF;
 574:	81 b9       	out	0x01, r24	; 1
	DDRC = 0xFF;
 576:	87 b9       	out	0x07, r24	; 7
	
	tasksNum = 3; // declare number of tasks
 578:	83 e0       	ldi	r24, 0x03	; 3
 57a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tasksNum>
	task tsks[3]; // initialize the task array
	tasks = tsks; // set the task array
 57e:	ce 01       	movw	r24, r28
 580:	01 96       	adiw	r24, 0x01	; 1
 582:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <tasks+0x1>
 586:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <tasks>
	
	// define tasks
	unsigned char i=0; // task counter
	tasks[i].state = USART_Init;
 58a:	19 82       	std	Y+1, r1	; 0x01
	tasks[i].period = 50;
 58c:	82 e3       	ldi	r24, 0x32	; 50
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	a0 e0       	ldi	r26, 0x00	; 0
 592:	b0 e0       	ldi	r27, 0x00	; 0
 594:	8a 83       	std	Y+2, r24	; 0x02
 596:	9b 83       	std	Y+3, r25	; 0x03
 598:	ac 83       	std	Y+4, r26	; 0x04
 59a:	bd 83       	std	Y+5, r27	; 0x05
	tasks[i].elapsedTime = tasks[i].period;
 59c:	8e 83       	std	Y+6, r24	; 0x06
 59e:	9f 83       	std	Y+7, r25	; 0x07
 5a0:	a8 87       	std	Y+8, r26	; 0x08
 5a2:	b9 87       	std	Y+9, r27	; 0x09
	tasks[i].TickFct = &TickFct_Usart;
 5a4:	83 ed       	ldi	r24, 0xD3	; 211
 5a6:	91 e0       	ldi	r25, 0x01	; 1
 5a8:	9b 87       	std	Y+11, r25	; 0x0b
 5aa:	8a 87       	std	Y+10, r24	; 0x0a
	++i;
	tasks[i].state = Matrix_Init;
 5ac:	1c 86       	std	Y+12, r1	; 0x0c
	tasks[i].period = 15;
 5ae:	8f e0       	ldi	r24, 0x0F	; 15
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	a0 e0       	ldi	r26, 0x00	; 0
 5b4:	b0 e0       	ldi	r27, 0x00	; 0
 5b6:	8d 87       	std	Y+13, r24	; 0x0d
 5b8:	9e 87       	std	Y+14, r25	; 0x0e
 5ba:	af 87       	std	Y+15, r26	; 0x0f
 5bc:	b8 8b       	std	Y+16, r27	; 0x10
	tasks[i].elapsedTime = tasks[i].period;
 5be:	89 8b       	std	Y+17, r24	; 0x11
 5c0:	9a 8b       	std	Y+18, r25	; 0x12
 5c2:	ab 8b       	std	Y+19, r26	; 0x13
 5c4:	bc 8b       	std	Y+20, r27	; 0x14
	tasks[i].TickFct = &TickFct_Matrix;
 5c6:	80 e9       	ldi	r24, 0x90	; 144
 5c8:	92 e0       	ldi	r25, 0x02	; 2
 5ca:	9e 8b       	std	Y+22, r25	; 0x16
 5cc:	8d 8b       	std	Y+21, r24	; 0x15
	++i;
	tasks[i].state = Light_Init;
 5ce:	1f 8a       	std	Y+23, r1	; 0x17
	tasks[i].period = 30;
 5d0:	8e e1       	ldi	r24, 0x1E	; 30
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	a0 e0       	ldi	r26, 0x00	; 0
 5d6:	b0 e0       	ldi	r27, 0x00	; 0
 5d8:	88 8f       	std	Y+24, r24	; 0x18
 5da:	99 8f       	std	Y+25, r25	; 0x19
 5dc:	aa 8f       	std	Y+26, r26	; 0x1a
 5de:	bb 8f       	std	Y+27, r27	; 0x1b
	tasks[i].elapsedTime = tasks[i].period;
 5e0:	8c 8f       	std	Y+28, r24	; 0x1c
 5e2:	9d 8f       	std	Y+29, r25	; 0x1d
 5e4:	ae 8f       	std	Y+30, r26	; 0x1e
 5e6:	bf 8f       	std	Y+31, r27	; 0x1f
	tasks[i].TickFct = &TickFct_Light;
 5e8:	84 e6       	ldi	r24, 0x64	; 100
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	99 a3       	std	Y+33, r25	; 0x21
 5ee:	88 a3       	std	Y+32, r24	; 0x20
	
	TimerSet(5); // value set should be GCD of all tasks
 5f0:	65 e0       	ldi	r22, 0x05	; 5
 5f2:	70 e0       	ldi	r23, 0x00	; 0
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 5f8:	50 de       	rcall	.-864    	; 0x29a <_Z8TimerSetm>
 5fa:	60 de       	rcall	.-832    	; 0x2bc <_Z7TimerOnv>
 5fc:	ff cf       	rjmp	.-2      	; 0x5fc <main+0xa4>

000005fe <_exit>:
 5fe:	f8 94       	cli

00000600 <__stop_program>:
 600:	ff cf       	rjmp	.-2      	; 0x600 <__stop_program>
