
classroom_sensor_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000a0c  00000aa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  0080010c  0080010c  00000aac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000adc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000120d  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a31  00000000  00000000  00001de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000913  00000000  00000000  0000281a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00003130  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000888  00000000  00000000  00003310  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000884  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000441c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	63 c1       	rjmp	.+710    	; 0x2fc <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e0       	ldi	r30, 0x0C	; 12
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 32       	cpi	r26, 0x26	; 38
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	25 d3       	rcall	.+1610   	; 0x70e <main>
  c4:	a1 c4       	rjmp	.+2370   	; 0xa08 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <_Z15TickFct_Stepperi>:
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
}
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	91 05       	cpc	r25, r1
  cc:	99 f0       	breq	.+38     	; 0xf4 <_Z15TickFct_Stepperi+0x2c>
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	91 05       	cpc	r25, r1
  d2:	b9 f1       	breq	.+110    	; 0x142 <_Z15TickFct_Stepperi+0x7a>
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	91 05       	cpc	r25, r1
  d8:	09 f0       	breq	.+2      	; 0xdc <_Z15TickFct_Stepperi+0x14>
  da:	59 c0       	rjmp	.+178    	; 0x18e <_Z15TickFct_Stepperi+0xc6>
  dc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <projector>
  e0:	81 11       	cpse	r24, r1
  e2:	03 c0       	rjmp	.+6      	; 0xea <_Z15TickFct_Stepperi+0x22>
  e4:	88 b1       	in	r24, 0x08	; 8
  e6:	88 b9       	out	0x08, r24	; 8
  e8:	61 c0       	rjmp	.+194    	; 0x1ac <_Z15TickFct_Stepperi+0xe4>
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	09 f0       	breq	.+2      	; 0xf0 <_Z15TickFct_Stepperi+0x28>
  ee:	5e c0       	rjmp	.+188    	; 0x1ac <_Z15TickFct_Stepperi+0xe4>
  f0:	44 9a       	sbi	0x08, 4	; 8
  f2:	5c c0       	rjmp	.+184    	; 0x1ac <_Z15TickFct_Stepperi+0xe4>
  f4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <step+0x1>
  f8:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <step>
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	fc 01       	movw	r30, r24
 102:	e0 50       	subi	r30, 0x00	; 0
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	80 81       	ld	r24, Z
 108:	88 b9       	out	0x08, r24	; 8
 10a:	8f e6       	ldi	r24, 0x6F	; 111
 10c:	97 e1       	ldi	r25, 0x17	; 23
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <_Z15TickFct_Stepperi+0x46>
 112:	00 c0       	rjmp	.+0      	; 0x114 <_Z15TickFct_Stepperi+0x4c>
 114:	00 00       	nop
 116:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <step>
 11a:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <step+0x1>
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <step+0x1>
 124:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <step>
 128:	88 30       	cpi	r24, 0x08	; 8
 12a:	91 05       	cpc	r25, r1
 12c:	4c f3       	brlt	.-46     	; 0x100 <_Z15TickFct_Stepperi+0x38>
 12e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <stepcnt>
 132:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <stepcnt+0x1>
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <stepcnt+0x1>
 13c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <stepcnt>
 140:	49 c0       	rjmp	.+146    	; 0x1d4 <_Z15TickFct_Stepperi+0x10c>
 142:	87 e0       	ldi	r24, 0x07	; 7
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <step+0x1>
 14a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <step>
 14e:	fc 01       	movw	r30, r24
 150:	e0 50       	subi	r30, 0x00	; 0
 152:	ff 4f       	sbci	r31, 0xFF	; 255
 154:	80 81       	ld	r24, Z
 156:	88 b9       	out	0x08, r24	; 8
 158:	8f e6       	ldi	r24, 0x6F	; 111
 15a:	97 e1       	ldi	r25, 0x17	; 23
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <_Z15TickFct_Stepperi+0x94>
 160:	00 c0       	rjmp	.+0      	; 0x162 <_Z15TickFct_Stepperi+0x9a>
 162:	00 00       	nop
 164:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <step>
 168:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <step+0x1>
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <step+0x1>
 172:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <step>
 176:	99 23       	and	r25, r25
 178:	54 f7       	brge	.-44     	; 0x14e <_Z15TickFct_Stepperi+0x86>
 17a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <stepcnt>
 17e:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <stepcnt+0x1>
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <stepcnt+0x1>
 188:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <stepcnt>
 18c:	31 c0       	rjmp	.+98     	; 0x1f0 <_Z15TickFct_Stepperi+0x128>
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	91 05       	cpc	r25, r1
 192:	61 f0       	breq	.+24     	; 0x1ac <_Z15TickFct_Stepperi+0xe4>
 194:	1c f4       	brge	.+6      	; 0x19c <_Z15TickFct_Stepperi+0xd4>
 196:	89 2b       	or	r24, r25
 198:	c9 f1       	breq	.+114    	; 0x20c <_Z15TickFct_Stepperi+0x144>
 19a:	05 c0       	rjmp	.+10     	; 0x1a6 <_Z15TickFct_Stepperi+0xde>
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	91 05       	cpc	r25, r1
 1a0:	c9 f0       	breq	.+50     	; 0x1d4 <_Z15TickFct_Stepperi+0x10c>
 1a2:	03 97       	sbiw	r24, 0x03	; 3
 1a4:	29 f1       	breq	.+74     	; 0x1f0 <_Z15TickFct_Stepperi+0x128>
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	08 95       	ret
 1ac:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <rec_projector>
 1b0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <projector>
 1b4:	98 17       	cp	r25, r24
 1b6:	69 f1       	breq	.+90     	; 0x212 <_Z15TickFct_Stepperi+0x14a>
 1b8:	81 11       	cpse	r24, r1
 1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <_Z15TickFct_Stepperi+0xfe>
 1bc:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <projector>
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	08 95       	ret
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	39 f5       	brne	.+78     	; 0x218 <_Z15TickFct_Stepperi+0x150>
 1ca:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <projector>
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	08 95       	ret
 1d4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <stepcnt>
 1d8:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <stepcnt+0x1>
 1dc:	81 15       	cp	r24, r1
 1de:	9a 40       	sbci	r25, 0x0A	; 10
 1e0:	f1 f4       	brne	.+60     	; 0x21e <_Z15TickFct_Stepperi+0x156>
 1e2:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <stepcnt+0x1>
 1e6:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <stepcnt>
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	08 95       	ret
 1f0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <stepcnt>
 1f4:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <stepcnt+0x1>
 1f8:	81 15       	cp	r24, r1
 1fa:	9a 40       	sbci	r25, 0x0A	; 10
 1fc:	99 f4       	brne	.+38     	; 0x224 <_Z15TickFct_Stepperi+0x15c>
 1fe:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <stepcnt+0x1>
 202:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <stepcnt>
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	08 95       	ret
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	08 95       	ret
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	08 95       	ret
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	08 95       	ret
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	08 95       	ret
 224:	83 e0       	ldi	r24, 0x03	; 3
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	08 95       	ret

0000022a <_Z8TimerISRv>:
 22a:	cf 92       	push	r12
 22c:	df 92       	push	r13
 22e:	ef 92       	push	r14
 230:	ff 92       	push	r15
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 23c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <tasksNum>
 240:	88 23       	and	r24, r24
 242:	09 f4       	brne	.+2      	; 0x246 <_Z8TimerISRv+0x1c>
 244:	53 c0       	rjmp	.+166    	; 0x2ec <_Z8TimerISRv+0xc2>
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	1b e0       	ldi	r17, 0x0B	; 11
 24a:	c0 91 1f 01 	lds	r28, 0x011F	; 0x80011f <tasks>
 24e:	d0 91 20 01 	lds	r29, 0x0120	; 0x800120 <tasks+0x1>
 252:	18 9f       	mul	r17, r24
 254:	c0 0d       	add	r28, r0
 256:	d1 1d       	adc	r29, r1
 258:	11 24       	eor	r1, r1
 25a:	4d 81       	ldd	r20, Y+5	; 0x05
 25c:	5e 81       	ldd	r21, Y+6	; 0x06
 25e:	6f 81       	ldd	r22, Y+7	; 0x07
 260:	78 85       	ldd	r23, Y+8	; 0x08
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	9a 81       	ldd	r25, Y+2	; 0x02
 266:	ab 81       	ldd	r26, Y+3	; 0x03
 268:	bc 81       	ldd	r27, Y+4	; 0x04
 26a:	48 17       	cp	r20, r24
 26c:	59 07       	cpc	r21, r25
 26e:	6a 07       	cpc	r22, r26
 270:	7b 07       	cpc	r23, r27
 272:	b0 f0       	brcs	.+44     	; 0x2a0 <_Z8TimerISRv+0x76>
 274:	88 81       	ld	r24, Y
 276:	e9 85       	ldd	r30, Y+9	; 0x09
 278:	fa 85       	ldd	r31, Y+10	; 0x0a
 27a:	08 2e       	mov	r0, r24
 27c:	00 0c       	add	r0, r0
 27e:	99 0b       	sbc	r25, r25
 280:	09 95       	icall
 282:	88 83       	st	Y, r24
 284:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 288:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <tasks>
 28c:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <tasks+0x1>
 290:	18 9f       	mul	r17, r24
 292:	e0 0d       	add	r30, r0
 294:	f1 1d       	adc	r31, r1
 296:	11 24       	eor	r1, r1
 298:	15 82       	std	Z+5, r1	; 0x05
 29a:	16 82       	std	Z+6, r1	; 0x06
 29c:	17 82       	std	Z+7, r1	; 0x07
 29e:	10 86       	std	Z+8, r1	; 0x08
 2a0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 2a4:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <tasks>
 2a8:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <tasks+0x1>
 2ac:	18 9f       	mul	r17, r24
 2ae:	e0 0d       	add	r30, r0
 2b0:	f1 1d       	adc	r31, r1
 2b2:	11 24       	eor	r1, r1
 2b4:	c5 80       	ldd	r12, Z+5	; 0x05
 2b6:	d6 80       	ldd	r13, Z+6	; 0x06
 2b8:	e7 80       	ldd	r14, Z+7	; 0x07
 2ba:	f0 84       	ldd	r15, Z+8	; 0x08
 2bc:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <tasksPeriodGCD>
 2c0:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <tasksPeriodGCD+0x1>
 2c4:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <tasksPeriodGCD+0x2>
 2c8:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <tasksPeriodGCD+0x3>
 2cc:	4c 0d       	add	r20, r12
 2ce:	5d 1d       	adc	r21, r13
 2d0:	6e 1d       	adc	r22, r14
 2d2:	7f 1d       	adc	r23, r15
 2d4:	45 83       	std	Z+5, r20	; 0x05
 2d6:	56 83       	std	Z+6, r21	; 0x06
 2d8:	67 83       	std	Z+7, r22	; 0x07
 2da:	70 87       	std	Z+8, r23	; 0x08
 2dc:	8f 5f       	subi	r24, 0xFF	; 255
 2de:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 2e2:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <tasksNum>
 2e6:	89 17       	cp	r24, r25
 2e8:	08 f4       	brcc	.+2      	; 0x2ec <_Z8TimerISRv+0xc2>
 2ea:	af cf       	rjmp	.-162    	; 0x24a <_Z8TimerISRv+0x20>
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	ff 90       	pop	r15
 2f4:	ef 90       	pop	r14
 2f6:	df 90       	pop	r13
 2f8:	cf 90       	pop	r12
 2fa:	08 95       	ret

000002fc <__vector_13>:
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	11 24       	eor	r1, r1
 306:	0b b6       	in	r0, 0x3b	; 59
 308:	0f 92       	push	r0
 30a:	2f 93       	push	r18
 30c:	3f 93       	push	r19
 30e:	4f 93       	push	r20
 310:	5f 93       	push	r21
 312:	6f 93       	push	r22
 314:	7f 93       	push	r23
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	af 93       	push	r26
 31c:	bf 93       	push	r27
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
 322:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <tasksPeriodCntDown>
 326:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <tasksPeriodCntDown+0x1>
 32a:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <tasksPeriodCntDown+0x2>
 32e:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <tasksPeriodCntDown+0x3>
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	a1 09       	sbc	r26, r1
 336:	b1 09       	sbc	r27, r1
 338:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tasksPeriodCntDown>
 33c:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <tasksPeriodCntDown+0x1>
 340:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <tasksPeriodCntDown+0x2>
 344:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <tasksPeriodCntDown+0x3>
 348:	89 2b       	or	r24, r25
 34a:	8a 2b       	or	r24, r26
 34c:	8b 2b       	or	r24, r27
 34e:	89 f4       	brne	.+34     	; 0x372 <__vector_13+0x76>
 350:	6c df       	rcall	.-296    	; 0x22a <_Z8TimerISRv>
 352:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <tasksPeriodGCD>
 356:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <tasksPeriodGCD+0x1>
 35a:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <tasksPeriodGCD+0x2>
 35e:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <tasksPeriodGCD+0x3>
 362:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tasksPeriodCntDown>
 366:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <tasksPeriodCntDown+0x1>
 36a:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <tasksPeriodCntDown+0x2>
 36e:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <tasksPeriodCntDown+0x3>
 372:	ff 91       	pop	r31
 374:	ef 91       	pop	r30
 376:	bf 91       	pop	r27
 378:	af 91       	pop	r26
 37a:	9f 91       	pop	r25
 37c:	8f 91       	pop	r24
 37e:	7f 91       	pop	r23
 380:	6f 91       	pop	r22
 382:	5f 91       	pop	r21
 384:	4f 91       	pop	r20
 386:	3f 91       	pop	r19
 388:	2f 91       	pop	r18
 38a:	0f 90       	pop	r0
 38c:	0b be       	out	0x3b, r0	; 59
 38e:	0f 90       	pop	r0
 390:	0f be       	out	0x3f, r0	; 63
 392:	0f 90       	pop	r0
 394:	1f 90       	pop	r1
 396:	18 95       	reti

00000398 <_Z8TimerSetm>:
 398:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <tasksPeriodGCD>
 39c:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <tasksPeriodGCD+0x1>
 3a0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <tasksPeriodGCD+0x2>
 3a4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <tasksPeriodGCD+0x3>
 3a8:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <tasksPeriodCntDown>
 3ac:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <tasksPeriodCntDown+0x1>
 3b0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <tasksPeriodCntDown+0x2>
 3b4:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <tasksPeriodCntDown+0x3>
 3b8:	08 95       	ret

000003ba <_Z7TimerOnv>:
 3ba:	8b e0       	ldi	r24, 0x0B	; 11
 3bc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3c0:	8d e7       	ldi	r24, 0x7D	; 125
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3c8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 3d2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3d6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 3da:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <tasksPeriodGCD>
 3de:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <tasksPeriodGCD+0x1>
 3e2:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <tasksPeriodGCD+0x2>
 3e6:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <tasksPeriodGCD+0x3>
 3ea:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tasksPeriodCntDown>
 3ee:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <tasksPeriodCntDown+0x1>
 3f2:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <tasksPeriodCntDown+0x2>
 3f6:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <tasksPeriodCntDown+0x3>
 3fa:	8f b7       	in	r24, 0x3f	; 63
 3fc:	80 68       	ori	r24, 0x80	; 128
 3fe:	8f bf       	out	0x3f, r24	; 63
 400:	08 95       	ret

00000402 <_Z9initUSARTh>:
 402:	81 30       	cpi	r24, 0x01	; 1
 404:	81 f0       	breq	.+32     	; 0x426 <_Z9initUSARTh+0x24>
 406:	e1 ec       	ldi	r30, 0xC1	; 193
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	88 61       	ori	r24, 0x18	; 24
 40e:	80 83       	st	Z, r24
 410:	e2 ec       	ldi	r30, 0xC2	; 194
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	86 60       	ori	r24, 0x06	; 6
 418:	80 83       	st	Z, r24
 41a:	83 e3       	ldi	r24, 0x33	; 51
 41c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 420:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 424:	08 95       	ret
 426:	e9 ec       	ldi	r30, 0xC9	; 201
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	88 61       	ori	r24, 0x18	; 24
 42e:	80 83       	st	Z, r24
 430:	ea ec       	ldi	r30, 0xCA	; 202
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	86 60       	ori	r24, 0x06	; 6
 438:	80 83       	st	Z, r24
 43a:	83 e3       	ldi	r24, 0x33	; 51
 43c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 440:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 444:	08 95       	ret

00000446 <_Z11USART_Flushh>:
//Parameter: usartNum specifies which USART is flushed
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
 446:	81 30       	cpi	r24, 0x01	; 1
 448:	29 f4       	brne	.+10     	; 0x454 <_Z11USART_Flushh+0xe>
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 44a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 44e:	88 23       	and	r24, r24
 450:	74 f0       	brlt	.+28     	; 0x46e <_Z11USART_Flushh+0x28>
 452:	08 95       	ret
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
 454:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 458:	88 23       	and	r24, r24
 45a:	8c f4       	brge	.+34     	; 0x47e <_Z11USART_Flushh+0x38>
 45c:	a6 ec       	ldi	r26, 0xC6	; 198
 45e:	b0 e0       	ldi	r27, 0x00	; 0
 460:	e0 ec       	ldi	r30, 0xC0	; 192
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	8c 91       	ld	r24, X
 466:	80 81       	ld	r24, Z
 468:	88 23       	and	r24, r24
 46a:	e4 f3       	brlt	.-8      	; 0x464 <_Z11USART_Flushh+0x1e>
 46c:	08 95       	ret
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 46e:	ae ec       	ldi	r26, 0xCE	; 206
 470:	b0 e0       	ldi	r27, 0x00	; 0
 472:	e8 ec       	ldi	r30, 0xC8	; 200
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	8c 91       	ld	r24, X
 478:	80 81       	ld	r24, Z
 47a:	88 23       	and	r24, r24
 47c:	e4 f3       	brlt	.-8      	; 0x476 <_Z11USART_Flushh+0x30>
 47e:	08 95       	ret

00000480 <_Z10USART_Sendhh>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
 480:	61 30       	cpi	r22, 0x01	; 1
 482:	41 f0       	breq	.+16     	; 0x494 <_Z10USART_Sendhh+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
 484:	e0 ec       	ldi	r30, 0xC0	; 192
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	90 81       	ld	r25, Z
 48a:	95 ff       	sbrs	r25, 5
 48c:	fd cf       	rjmp	.-6      	; 0x488 <_Z10USART_Sendhh+0x8>
		UDR0 = sendMe;
 48e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 492:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
 494:	e8 ec       	ldi	r30, 0xC8	; 200
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	90 81       	ld	r25, Z
 49a:	95 ff       	sbrs	r25, 5
 49c:	fd cf       	rjmp	.-6      	; 0x498 <_Z10USART_Sendhh+0x18>
		UDR1 = sendMe;
 49e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 4a2:	08 95       	ret

000004a4 <_Z13USART_Receiveh>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 4a4:	81 30       	cpi	r24, 0x01	; 1
 4a6:	41 f0       	breq	.+16     	; 0x4b8 <_Z13USART_Receiveh+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 4a8:	e0 ec       	ldi	r30, 0xC0	; 192
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	80 81       	ld	r24, Z
 4ae:	88 23       	and	r24, r24
 4b0:	ec f7       	brge	.-6      	; 0x4ac <_Z13USART_Receiveh+0x8>
		return UDR0; // Get and return received data from buffer
 4b2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4b6:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 4b8:	e8 ec       	ldi	r30, 0xC8	; 200
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	80 81       	ld	r24, Z
 4be:	88 23       	and	r24, r24
 4c0:	ec f7       	brge	.-6      	; 0x4bc <_Z13USART_Receiveh+0x18>
		return UDR1;
 4c2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	}
}
 4c6:	08 95       	ret

000004c8 <_Z17TickFct_BlueToothi>:
}
/*temperature sensor*/

enum BlueTooth_States { BlueTooth_Init, Receiving, Sending };
int TickFct_BlueTooth(int state) {
	switch(state){ //State Actions
 4c8:	81 30       	cpi	r24, 0x01	; 1
 4ca:	91 05       	cpc	r25, r1
 4cc:	81 f0       	breq	.+32     	; 0x4ee <_Z17TickFct_BlueToothi+0x26>
 4ce:	82 30       	cpi	r24, 0x02	; 2
 4d0:	91 05       	cpc	r25, r1
 4d2:	09 f4       	brne	.+2      	; 0x4d6 <_Z17TickFct_BlueToothi+0xe>
 4d4:	3b c0       	rjmp	.+118    	; 0x54c <_Z17TickFct_BlueToothi+0x84>
 4d6:	00 97       	sbiw	r24, 0x00	; 0
 4d8:	09 f0       	breq	.+2      	; 0x4dc <_Z17TickFct_BlueToothi+0x14>
 4da:	47 c0       	rjmp	.+142    	; 0x56a <_Z17TickFct_BlueToothi+0xa2>
		case BlueTooth_Init:
			initUSART(0);
 4dc:	80 e0       	ldi	r24, 0x00	; 0
			USART_Flush(0);
 4de:	91 df       	rcall	.-222    	; 0x402 <_Z9initUSARTh>
			initUSART(1);
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	b1 df       	rcall	.-158    	; 0x446 <_Z11USART_Flushh>
			USART_Flush(1);
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	8d df       	rcall	.-230    	; 0x402 <_Z9initUSARTh>
 4e8:	81 e0       	ldi	r24, 0x01	; 1
		break;
 4ea:	ad df       	rcall	.-166    	; 0x446 <_Z11USART_Flushh>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 4ec:	4f c0       	rjmp	.+158    	; 0x58c <_Z17TickFct_BlueToothi+0xc4>
		
		case Receiving:
			if(USART_HasReceived(0))
 4ee:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
			{
				rec_tmp = USART_Receive(0);
 4f2:	88 23       	and	r24, r24
 4f4:	0c f0       	brlt	.+2      	; 0x4f8 <_Z17TickFct_BlueToothi+0x30>
 4f6:	44 c0       	rjmp	.+136    	; 0x580 <_Z17TickFct_BlueToothi+0xb8>
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	d4 df       	rcall	.-88     	; 0x4a4 <_Z13USART_Receiveh>
 4fc:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <rec_tmp>
				if ((rec_tmp & 0xF0) == 0x10)
 500:	98 2f       	mov	r25, r24
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 502:	90 7f       	andi	r25, 0xF0	; 240
				{
					if(USART_IsSendReady(1))
 504:	90 31       	cpi	r25, 0x10	; 16
 506:	69 f4       	brne	.+26     	; 0x522 <_Z17TickFct_BlueToothi+0x5a>
					{
						USART_Send(rec_tmp,1);
 508:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 50c:	95 ff       	sbrs	r25, 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 50e:	38 c0       	rjmp	.+112    	; 0x580 <_Z17TickFct_BlueToothi+0xb8>
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	b6 df       	rcall	.-148    	; 0x480 <_Z10USART_Sendhh>
 514:	8f ec       	ldi	r24, 0xCF	; 207
 516:	97 e0       	ldi	r25, 0x07	; 7
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	f1 f7       	brne	.-4      	; 0x518 <_Z17TickFct_BlueToothi+0x50>
						_delay_ms(1);
					}
				}
				else if ((rec_tmp & 0xF0) == 0x20)
 51c:	00 c0       	rjmp	.+0      	; 0x51e <_Z17TickFct_BlueToothi+0x56>
 51e:	00 00       	nop
 520:	2f c0       	rjmp	.+94     	; 0x580 <_Z17TickFct_BlueToothi+0xb8>
				{
					if(USART_IsSendReady(1))
 522:	90 32       	cpi	r25, 0x20	; 32
 524:	69 f4       	brne	.+26     	; 0x540 <_Z17TickFct_BlueToothi+0x78>
					{
						USART_Send(rec_tmp,1);
 526:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 52a:	95 ff       	sbrs	r25, 5
 52c:	29 c0       	rjmp	.+82     	; 0x580 <_Z17TickFct_BlueToothi+0xb8>
 52e:	61 e0       	ldi	r22, 0x01	; 1
 530:	a7 df       	rcall	.-178    	; 0x480 <_Z10USART_Sendhh>
 532:	8f ec       	ldi	r24, 0xCF	; 207
 534:	97 e0       	ldi	r25, 0x07	; 7
 536:	01 97       	sbiw	r24, 0x01	; 1
 538:	f1 f7       	brne	.-4      	; 0x536 <_Z17TickFct_BlueToothi+0x6e>
						_delay_ms(1);
					}
				}
				else if ((rec_tmp & 0xF0) == 0x30)
 53a:	00 c0       	rjmp	.+0      	; 0x53c <_Z17TickFct_BlueToothi+0x74>
 53c:	00 00       	nop
				{
					rec_projector = (rec_tmp & 0x0F);
 53e:	20 c0       	rjmp	.+64     	; 0x580 <_Z17TickFct_BlueToothi+0xb8>
 540:	90 33       	cpi	r25, 0x30	; 48
 542:	f1 f4       	brne	.+60     	; 0x580 <_Z17TickFct_BlueToothi+0xb8>
 544:	8f 70       	andi	r24, 0x0F	; 15
				}
			}
		break;
		
		case Sending:
			if(USART_IsSendReady(0))
 546:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <rec_projector>
			{
				USART_Send(st_num,0);
 54a:	1a c0       	rjmp	.+52     	; 0x580 <_Z17TickFct_BlueToothi+0xb8>
 54c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 550:	85 ff       	sbrs	r24, 5
 552:	1c c0       	rjmp	.+56     	; 0x58c <_Z17TickFct_BlueToothi+0xc4>
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <st_num>
 55a:	92 df       	rcall	.-220    	; 0x480 <_Z10USART_Sendhh>
 55c:	8f ec       	ldi	r24, 0xCF	; 207
 55e:	97 e0       	ldi	r25, 0x07	; 7
 560:	01 97       	sbiw	r24, 0x01	; 1
		break;
		
		default:
		break;
	}
	switch(state){ //Transactions
 562:	f1 f7       	brne	.-4      	; 0x560 <_Z17TickFct_BlueToothi+0x98>
 564:	00 c0       	rjmp	.+0      	; 0x566 <_Z17TickFct_BlueToothi+0x9e>
 566:	00 00       	nop
 568:	11 c0       	rjmp	.+34     	; 0x58c <_Z17TickFct_BlueToothi+0xc4>
 56a:	81 30       	cpi	r24, 0x01	; 1
 56c:	91 05       	cpc	r25, r1
 56e:	41 f0       	breq	.+16     	; 0x580 <_Z17TickFct_BlueToothi+0xb8>
 570:	82 30       	cpi	r24, 0x02	; 2
		case Sending:
			state = Receiving;
		break;
		
		default:
			state = BlueTooth_Init;
 572:	91 05       	cpc	r25, r1
 574:	41 f0       	breq	.+16     	; 0x586 <_Z17TickFct_BlueToothi+0xbe>
 576:	89 2b       	or	r24, r25
		case BlueTooth_Init:
			state = Receiving;
		break;
		
		case Receiving:
			state = Sending;
 578:	31 f0       	breq	.+12     	; 0x586 <_Z17TickFct_BlueToothi+0xbe>
 57a:	80 e0       	ldi	r24, 0x00	; 0
		break;
 57c:	90 e0       	ldi	r25, 0x00	; 0
		default:
		break;
	}
	switch(state){ //Transactions
		case BlueTooth_Init:
			state = Receiving;
 57e:	08 95       	ret
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	08 95       	ret
 586:	81 e0       	ldi	r24, 0x01	; 1
		default:
			state = BlueTooth_Init;
		break;
	}
	return state;
};
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	08 95       	ret
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	08 95       	ret

00000592 <_Z7InitADCv>:
float adc_result;

/*ADC*/
void InitADC()
{
	ADMUX=(1<<REFS0);                         // For Aref=AVcc;
 592:	80 e4       	ldi	r24, 0x40	; 64
 594:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Rrescalar div factor =128
 598:	87 e8       	ldi	r24, 0x87	; 135
 59a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 59e:	08 95       	ret

000005a0 <_Z7ReadADCh>:

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
	ADMUX|=ch;
 5a0:	ec e7       	ldi	r30, 0x7C	; 124
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	90 81       	ld	r25, Z
 5a6:	87 70       	andi	r24, 0x07	; 7
 5a8:	98 2b       	or	r25, r24
 5aa:	90 83       	st	Z, r25

	//Start Single conversion
	ADCSRA|=(1<<ADSC);
 5ac:	ea e7       	ldi	r30, 0x7A	; 122
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	80 64       	ori	r24, 0x40	; 64
 5b4:	80 83       	st	Z, r24

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
 5b6:	80 81       	ld	r24, Z
 5b8:	84 ff       	sbrs	r24, 4
 5ba:	fd cf       	rjmp	.-6      	; 0x5b6 <_Z7ReadADCh+0x16>
	//Clear ADIF by writing one to it
	//Note you may be wondering why we have write one to clear it
	//This is standard way of clearing bits in io as said in datasheets.
	//The code writes '1' but it result in setting bit to '0' !!!

	ADCSRA|=(1<<ADIF);
 5bc:	ea e7       	ldi	r30, 0x7A	; 122
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	80 81       	ld	r24, Z
 5c2:	80 61       	ori	r24, 0x10	; 16
 5c4:	80 83       	st	Z, r24

	return(ADC);
 5c6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 5ca:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 5ce:	08 95       	ret

000005d0 <_Z15TickFct_FSensori>:
	return state;
};

enum FSensor_States { FSensor_Init, FSensor_Get };
int TickFct_FSensor(int state) {
	switch(state){ //State Actions
 5d0:	00 97       	sbiw	r24, 0x00	; 0
 5d2:	21 f0       	breq	.+8      	; 0x5dc <_Z15TickFct_FSensori+0xc>
 5d4:	81 30       	cpi	r24, 0x01	; 1
 5d6:	91 05       	cpc	r25, r1
 5d8:	19 f0       	breq	.+6      	; 0x5e0 <_Z15TickFct_FSensori+0x10>
		case FSensor_Init:
			InitADC();
 5da:	23 c0       	rjmp	.+70     	; 0x622 <_Z15TickFct_FSensori+0x52>
		break;
		
		case FSensor_Get:
			adc_result=ReadADC(0)/204.8;	 
 5dc:	da df       	rcall	.-76     	; 0x592 <_Z7InitADCv>
 5de:	29 c0       	rjmp	.+82     	; 0x632 <_Z15TickFct_FSensori+0x62>
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	de df       	rcall	.-68     	; 0x5a0 <_Z7ReadADCh>
 5e4:	bc 01       	movw	r22, r24
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	58 d1       	rcall	.+688    	; 0x89c <__floatunsisf>
 5ec:	2d ec       	ldi	r18, 0xCD	; 205
 5ee:	3c ec       	ldi	r19, 0xCC	; 204
 5f0:	4c e4       	ldi	r20, 0x4C	; 76
 5f2:	53 e4       	ldi	r21, 0x43	; 67
 5f4:	eb d0       	rcall	.+470    	; 0x7cc <__divsf3>
 5f6:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <adc_result>
 5fa:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <adc_result+0x1>
 5fe:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <adc_result+0x2>
			if (adc_result > 1.8)
 602:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <adc_result+0x3>
 606:	26 e6       	ldi	r18, 0x66	; 102
 608:	36 e6       	ldi	r19, 0x66	; 102
 60a:	46 ee       	ldi	r20, 0xE6	; 230
 60c:	5f e3       	ldi	r21, 0x3F	; 63
			{
				st_num = 1;
 60e:	d4 d1       	rcall	.+936    	; 0x9b8 <__gesf2>
 610:	18 16       	cp	r1, r24
 612:	24 f4       	brge	.+8      	; 0x61c <_Z15TickFct_FSensori+0x4c>
 614:	81 e0       	ldi	r24, 0x01	; 1
			} 
			else
			{
				st_num = 0;
 616:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <st_num>
 61a:	0b c0       	rjmp	.+22     	; 0x632 <_Z15TickFct_FSensori+0x62>
		break;
		
		default:
		break;
	}
	switch(state){ //Transactions
 61c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <st_num>
		case FSensor_Get:
		state = FSensor_Get;
		break;
		
		default:
		state = FSensor_Init;
 620:	08 c0       	rjmp	.+16     	; 0x632 <_Z15TickFct_FSensori+0x62>
 622:	02 97       	sbiw	r24, 0x02	; 2
 624:	18 f0       	brcs	.+6      	; 0x62c <_Z15TickFct_FSensori+0x5c>
		default:
		break;
	}
	switch(state){ //Transactions
		case FSensor_Init:
		state = FSensor_Get;
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	08 95       	ret
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
		default:
		state = FSensor_Init;
		break;
	}
	return state;
};
 630:	08 95       	ret
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	08 95       	ret

00000638 <_Z7Requestv>:
#define DHT11_PIN 0
uint8_t c=0,I_RH,D_RH,I_Temp,D_Temp,CheckSum;

void Request()				/* Microcontroller send start pulse/request */
{
	DDRB |= (1<<DHT11_PIN);
 638:	20 9a       	sbi	0x04, 0	; 4
	PORTB &= ~(1<<DHT11_PIN);	/* set to low pin */
 63a:	28 98       	cbi	0x05, 0	; 5
 63c:	8f e3       	ldi	r24, 0x3F	; 63
 63e:	9c e9       	ldi	r25, 0x9C	; 156
 640:	01 97       	sbiw	r24, 0x01	; 1
 642:	f1 f7       	brne	.-4      	; 0x640 <_Z7Requestv+0x8>
 644:	00 c0       	rjmp	.+0      	; 0x646 <_Z7Requestv+0xe>
 646:	00 00       	nop
	_delay_ms(20);			/* wait for 20ms */
	PORTB |= (1<<DHT11_PIN);	/* set to high pin */
 648:	28 9a       	sbi	0x05, 0	; 5
 64a:	08 95       	ret

0000064c <_Z8Responsev>:
}

void Response()				/* receive response from DHT11 */
{
	DDRB &= ~(1<<DHT11_PIN);
 64c:	20 98       	cbi	0x04, 0	; 4
	while(PINB & (1<<DHT11_PIN));
 64e:	18 99       	sbic	0x03, 0	; 3
 650:	fe cf       	rjmp	.-4      	; 0x64e <_Z8Responsev+0x2>
	while((PINB & (1<<DHT11_PIN))==0);
 652:	18 9b       	sbis	0x03, 0	; 3
 654:	fe cf       	rjmp	.-4      	; 0x652 <_Z8Responsev+0x6>
	while(PINB & (1<<DHT11_PIN));
 656:	18 99       	sbic	0x03, 0	; 3
 658:	fe cf       	rjmp	.-4      	; 0x656 <_Z8Responsev+0xa>
}
 65a:	08 95       	ret

0000065c <_Z12Receive_datav>:

uint8_t Receive_data()			/* receive data */
{
 65c:	88 e0       	ldi	r24, 0x08	; 8
 65e:	90 e0       	ldi	r25, 0x00	; 0
	for (int q=0; q<8; q++)
	{
		while((PINB & (1<<DHT11_PIN)) == 0);  /* check received bit 0 or 1 */
 660:	18 9b       	sbis	0x03, 0	; 3
 662:	fe cf       	rjmp	.-4      	; 0x660 <_Z12Receive_datav+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 664:	20 e5       	ldi	r18, 0x50	; 80
 666:	2a 95       	dec	r18
 668:	f1 f7       	brne	.-4      	; 0x666 <_Z12Receive_datav+0xa>
		_delay_us(30);
		if(PINB & (1<<DHT11_PIN))/* if high pulse is greater than 30ms */
 66a:	18 9b       	sbis	0x03, 0	; 3
 66c:	07 c0       	rjmp	.+14     	; 0x67c <_Z12Receive_datav+0x20>
		c = (c<<1)|(0x01);	/* then its logic HIGH */
 66e:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <c>
 672:	22 0f       	add	r18, r18
 674:	21 60       	ori	r18, 0x01	; 1
 676:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <c>
 67a:	05 c0       	rjmp	.+10     	; 0x686 <_Z12Receive_datav+0x2a>
		else			/* otherwise its logic LOW */
		c = (c<<1);
 67c:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <c>
 680:	22 0f       	add	r18, r18
 682:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <c>
		while(PINB & (1<<DHT11_PIN));
 686:	18 99       	sbic	0x03, 0	; 3
 688:	fe cf       	rjmp	.-4      	; 0x686 <_Z12Receive_datav+0x2a>
 68a:	01 97       	sbiw	r24, 0x01	; 1
	while(PINB & (1<<DHT11_PIN));
}

uint8_t Receive_data()			/* receive data */
{
	for (int q=0; q<8; q++)
 68c:	49 f7       	brne	.-46     	; 0x660 <_Z12Receive_datav+0x4>
		else			/* otherwise its logic LOW */
		c = (c<<1);
		while(PINB & (1<<DHT11_PIN));
	}
	return c;
}
 68e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <c>
 692:	08 95       	ret

00000694 <_Z15TickFct_TSensori>:
	return state;
};

enum TSensor_States { TSensor_Init, TSensor_Get };
int TickFct_TSensor(int state) {
	switch(state){ //State Actions
 694:	00 97       	sbiw	r24, 0x00	; 0
 696:	21 f0       	breq	.+8      	; 0x6a0 <_Z15TickFct_TSensori+0xc>
 698:	81 30       	cpi	r24, 0x01	; 1
 69a:	91 05       	cpc	r25, r1
 69c:	19 f0       	breq	.+6      	; 0x6a4 <_Z15TickFct_TSensori+0x10>
 69e:	2c c0       	rjmp	.+88     	; 0x6f8 <_Z15TickFct_TSensori+0x64>
		case TSensor_Init:
			PORTD &= 0xEF;
 6a0:	5c 98       	cbi	0x0b, 4	; 11
		break;
		
		case TSensor_Get:
			Request();
 6a2:	32 c0       	rjmp	.+100    	; 0x708 <_Z15TickFct_TSensori+0x74>
 6a4:	c9 df       	rcall	.-110    	; 0x638 <_Z7Requestv>
 6a6:	d2 df       	rcall	.-92     	; 0x64c <_Z8Responsev>
 6a8:	d9 df       	rcall	.-78     	; 0x65c <_Z12Receive_datav>
 6aa:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <I_RH>
 6ae:	d6 df       	rcall	.-84     	; 0x65c <_Z12Receive_datav>
 6b0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <D_RH>
 6b4:	d3 df       	rcall	.-90     	; 0x65c <_Z12Receive_datav>
 6b6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <I_Temp>
 6ba:	d0 df       	rcall	.-96     	; 0x65c <_Z12Receive_datav>
 6bc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <D_Temp>
 6c0:	cd df       	rcall	.-102    	; 0x65c <_Z12Receive_datav>
 6c2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <CheckSum>
 6c6:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <I_Temp>
 6ca:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <I_RH>
 6ce:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <D_RH>
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	29 0f       	add	r18, r25
 6d6:	31 1d       	adc	r19, r1
 6d8:	24 0f       	add	r18, r20
 6da:	31 1d       	adc	r19, r1
 6dc:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <D_Temp>
 6e0:	29 0f       	add	r18, r25
 6e2:	31 1d       	adc	r19, r1
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	28 17       	cp	r18, r24
 6e8:	39 07       	cpc	r19, r25
 6ea:	71 f4       	brne	.+28     	; 0x708 <_Z15TickFct_TSensori+0x74>
 6ec:	4b 31       	cpi	r20, 0x1B	; 27
 6ee:	10 f0       	brcs	.+4      	; 0x6f4 <_Z15TickFct_TSensori+0x60>
 6f0:	5c 98       	cbi	0x0b, 4	; 11
 6f2:	0a c0       	rjmp	.+20     	; 0x708 <_Z15TickFct_TSensori+0x74>
 6f4:	5c 9a       	sbi	0x0b, 4	; 11
 6f6:	08 c0       	rjmp	.+16     	; 0x708 <_Z15TickFct_TSensori+0x74>
 6f8:	02 97       	sbiw	r24, 0x02	; 2
 6fa:	18 f0       	brcs	.+6      	; 0x702 <_Z15TickFct_TSensori+0x6e>
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	08 95       	ret
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	08 95       	ret
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	08 95       	ret

0000070e <main>:
 70e:	cf 93       	push	r28
 710:	df 93       	push	r29
 712:	cd b7       	in	r28, 0x3d	; 61
 714:	de b7       	in	r29, 0x3e	; 62
 716:	ac 97       	sbiw	r28, 0x2c	; 44
 718:	0f b6       	in	r0, 0x3f	; 63
 71a:	f8 94       	cli
 71c:	de bf       	out	0x3e, r29	; 62
 71e:	0f be       	out	0x3f, r0	; 63
 720:	cd bf       	out	0x3d, r28	; 61
 722:	8f ef       	ldi	r24, 0xFF	; 255
 724:	87 b9       	out	0x07, r24	; 7
 726:	11 b8       	out	0x01, r1	; 1
 728:	8a ef       	ldi	r24, 0xFA	; 250
 72a:	8a b9       	out	0x0a, r24	; 10
 72c:	84 e0       	ldi	r24, 0x04	; 4
 72e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <tasksNum>
 732:	ce 01       	movw	r24, r28
 734:	01 96       	adiw	r24, 0x01	; 1
 736:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <tasks+0x1>
 73a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <tasks>
 73e:	19 82       	std	Y+1, r1	; 0x01
 740:	82 e3       	ldi	r24, 0x32	; 50
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	a0 e0       	ldi	r26, 0x00	; 0
 746:	b0 e0       	ldi	r27, 0x00	; 0
 748:	8a 83       	std	Y+2, r24	; 0x02
 74a:	9b 83       	std	Y+3, r25	; 0x03
 74c:	ac 83       	std	Y+4, r26	; 0x04
 74e:	bd 83       	std	Y+5, r27	; 0x05
 750:	8e 83       	std	Y+6, r24	; 0x06
 752:	9f 83       	std	Y+7, r25	; 0x07
 754:	a8 87       	std	Y+8, r26	; 0x08
 756:	b9 87       	std	Y+9, r27	; 0x09
 758:	24 e6       	ldi	r18, 0x64	; 100
 75a:	32 e0       	ldi	r19, 0x02	; 2
 75c:	3b 87       	std	Y+11, r19	; 0x0b
 75e:	2a 87       	std	Y+10, r18	; 0x0a
 760:	1c 86       	std	Y+12, r1	; 0x0c
 762:	4a e0       	ldi	r20, 0x0A	; 10
 764:	50 e0       	ldi	r21, 0x00	; 0
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	70 e0       	ldi	r23, 0x00	; 0
 76a:	4d 87       	std	Y+13, r20	; 0x0d
 76c:	5e 87       	std	Y+14, r21	; 0x0e
 76e:	6f 87       	std	Y+15, r22	; 0x0f
 770:	78 8b       	std	Y+16, r23	; 0x10
 772:	49 8b       	std	Y+17, r20	; 0x11
 774:	5a 8b       	std	Y+18, r21	; 0x12
 776:	6b 8b       	std	Y+19, r22	; 0x13
 778:	7c 8b       	std	Y+20, r23	; 0x14
 77a:	24 e6       	ldi	r18, 0x64	; 100
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	3e 8b       	std	Y+22, r19	; 0x16
 780:	2d 8b       	std	Y+21, r18	; 0x15
 782:	1f 8a       	std	Y+23, r1	; 0x17
 784:	48 ec       	ldi	r20, 0xC8	; 200
 786:	50 e0       	ldi	r21, 0x00	; 0
 788:	60 e0       	ldi	r22, 0x00	; 0
 78a:	70 e0       	ldi	r23, 0x00	; 0
 78c:	48 8f       	std	Y+24, r20	; 0x18
 78e:	59 8f       	std	Y+25, r21	; 0x19
 790:	6a 8f       	std	Y+26, r22	; 0x1a
 792:	7b 8f       	std	Y+27, r23	; 0x1b
 794:	4c 8f       	std	Y+28, r20	; 0x1c
 796:	5d 8f       	std	Y+29, r21	; 0x1d
 798:	6e 8f       	std	Y+30, r22	; 0x1e
 79a:	7f 8f       	std	Y+31, r23	; 0x1f
 79c:	2a e4       	ldi	r18, 0x4A	; 74
 79e:	33 e0       	ldi	r19, 0x03	; 3
 7a0:	39 a3       	std	Y+33, r19	; 0x21
 7a2:	28 a3       	std	Y+32, r18	; 0x20
 7a4:	1a a2       	std	Y+34, r1	; 0x22
 7a6:	8b a3       	std	Y+35, r24	; 0x23
 7a8:	9c a3       	std	Y+36, r25	; 0x24
 7aa:	ad a3       	std	Y+37, r26	; 0x25
 7ac:	be a3       	std	Y+38, r27	; 0x26
 7ae:	8f a3       	std	Y+39, r24	; 0x27
 7b0:	98 a7       	std	Y+40, r25	; 0x28
 7b2:	a9 a7       	std	Y+41, r26	; 0x29
 7b4:	ba a7       	std	Y+42, r27	; 0x2a
 7b6:	88 ee       	ldi	r24, 0xE8	; 232
 7b8:	92 e0       	ldi	r25, 0x02	; 2
 7ba:	9c a7       	std	Y+44, r25	; 0x2c
 7bc:	8b a7       	std	Y+43, r24	; 0x2b
 7be:	65 e0       	ldi	r22, 0x05	; 5
 7c0:	70 e0       	ldi	r23, 0x00	; 0
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	e8 dd       	rcall	.-1072   	; 0x398 <_Z8TimerSetm>
 7c8:	f8 dd       	rcall	.-1040   	; 0x3ba <_Z7TimerOnv>
 7ca:	ff cf       	rjmp	.-2      	; 0x7ca <main+0xbc>

000007cc <__divsf3>:
 7cc:	0c d0       	rcall	.+24     	; 0x7e6 <__divsf3x>
 7ce:	ba c0       	rjmp	.+372    	; 0x944 <__fp_round>
 7d0:	b2 d0       	rcall	.+356    	; 0x936 <__fp_pscB>
 7d2:	40 f0       	brcs	.+16     	; 0x7e4 <__divsf3+0x18>
 7d4:	a9 d0       	rcall	.+338    	; 0x928 <__fp_pscA>
 7d6:	30 f0       	brcs	.+12     	; 0x7e4 <__divsf3+0x18>
 7d8:	21 f4       	brne	.+8      	; 0x7e2 <__divsf3+0x16>
 7da:	5f 3f       	cpi	r21, 0xFF	; 255
 7dc:	19 f0       	breq	.+6      	; 0x7e4 <__divsf3+0x18>
 7de:	9b c0       	rjmp	.+310    	; 0x916 <__fp_inf>
 7e0:	51 11       	cpse	r21, r1
 7e2:	e4 c0       	rjmp	.+456    	; 0x9ac <__fp_szero>
 7e4:	9e c0       	rjmp	.+316    	; 0x922 <__fp_nan>

000007e6 <__divsf3x>:
 7e6:	bf d0       	rcall	.+382    	; 0x966 <__fp_split3>
 7e8:	98 f3       	brcs	.-26     	; 0x7d0 <__divsf3+0x4>

000007ea <__divsf3_pse>:
 7ea:	99 23       	and	r25, r25
 7ec:	c9 f3       	breq	.-14     	; 0x7e0 <__divsf3+0x14>
 7ee:	55 23       	and	r21, r21
 7f0:	b1 f3       	breq	.-20     	; 0x7de <__divsf3+0x12>
 7f2:	95 1b       	sub	r25, r21
 7f4:	55 0b       	sbc	r21, r21
 7f6:	bb 27       	eor	r27, r27
 7f8:	aa 27       	eor	r26, r26
 7fa:	62 17       	cp	r22, r18
 7fc:	73 07       	cpc	r23, r19
 7fe:	84 07       	cpc	r24, r20
 800:	38 f0       	brcs	.+14     	; 0x810 <__divsf3_pse+0x26>
 802:	9f 5f       	subi	r25, 0xFF	; 255
 804:	5f 4f       	sbci	r21, 0xFF	; 255
 806:	22 0f       	add	r18, r18
 808:	33 1f       	adc	r19, r19
 80a:	44 1f       	adc	r20, r20
 80c:	aa 1f       	adc	r26, r26
 80e:	a9 f3       	breq	.-22     	; 0x7fa <__divsf3_pse+0x10>
 810:	33 d0       	rcall	.+102    	; 0x878 <__divsf3_pse+0x8e>
 812:	0e 2e       	mov	r0, r30
 814:	3a f0       	brmi	.+14     	; 0x824 <__divsf3_pse+0x3a>
 816:	e0 e8       	ldi	r30, 0x80	; 128
 818:	30 d0       	rcall	.+96     	; 0x87a <__divsf3_pse+0x90>
 81a:	91 50       	subi	r25, 0x01	; 1
 81c:	50 40       	sbci	r21, 0x00	; 0
 81e:	e6 95       	lsr	r30
 820:	00 1c       	adc	r0, r0
 822:	ca f7       	brpl	.-14     	; 0x816 <__divsf3_pse+0x2c>
 824:	29 d0       	rcall	.+82     	; 0x878 <__divsf3_pse+0x8e>
 826:	fe 2f       	mov	r31, r30
 828:	27 d0       	rcall	.+78     	; 0x878 <__divsf3_pse+0x8e>
 82a:	66 0f       	add	r22, r22
 82c:	77 1f       	adc	r23, r23
 82e:	88 1f       	adc	r24, r24
 830:	bb 1f       	adc	r27, r27
 832:	26 17       	cp	r18, r22
 834:	37 07       	cpc	r19, r23
 836:	48 07       	cpc	r20, r24
 838:	ab 07       	cpc	r26, r27
 83a:	b0 e8       	ldi	r27, 0x80	; 128
 83c:	09 f0       	breq	.+2      	; 0x840 <__divsf3_pse+0x56>
 83e:	bb 0b       	sbc	r27, r27
 840:	80 2d       	mov	r24, r0
 842:	bf 01       	movw	r22, r30
 844:	ff 27       	eor	r31, r31
 846:	93 58       	subi	r25, 0x83	; 131
 848:	5f 4f       	sbci	r21, 0xFF	; 255
 84a:	2a f0       	brmi	.+10     	; 0x856 <__divsf3_pse+0x6c>
 84c:	9e 3f       	cpi	r25, 0xFE	; 254
 84e:	51 05       	cpc	r21, r1
 850:	68 f0       	brcs	.+26     	; 0x86c <__divsf3_pse+0x82>
 852:	61 c0       	rjmp	.+194    	; 0x916 <__fp_inf>
 854:	ab c0       	rjmp	.+342    	; 0x9ac <__fp_szero>
 856:	5f 3f       	cpi	r21, 0xFF	; 255
 858:	ec f3       	brlt	.-6      	; 0x854 <__divsf3_pse+0x6a>
 85a:	98 3e       	cpi	r25, 0xE8	; 232
 85c:	dc f3       	brlt	.-10     	; 0x854 <__divsf3_pse+0x6a>
 85e:	86 95       	lsr	r24
 860:	77 95       	ror	r23
 862:	67 95       	ror	r22
 864:	b7 95       	ror	r27
 866:	f7 95       	ror	r31
 868:	9f 5f       	subi	r25, 0xFF	; 255
 86a:	c9 f7       	brne	.-14     	; 0x85e <__divsf3_pse+0x74>
 86c:	88 0f       	add	r24, r24
 86e:	91 1d       	adc	r25, r1
 870:	96 95       	lsr	r25
 872:	87 95       	ror	r24
 874:	97 f9       	bld	r25, 7
 876:	08 95       	ret
 878:	e1 e0       	ldi	r30, 0x01	; 1
 87a:	66 0f       	add	r22, r22
 87c:	77 1f       	adc	r23, r23
 87e:	88 1f       	adc	r24, r24
 880:	bb 1f       	adc	r27, r27
 882:	62 17       	cp	r22, r18
 884:	73 07       	cpc	r23, r19
 886:	84 07       	cpc	r24, r20
 888:	ba 07       	cpc	r27, r26
 88a:	20 f0       	brcs	.+8      	; 0x894 <__divsf3_pse+0xaa>
 88c:	62 1b       	sub	r22, r18
 88e:	73 0b       	sbc	r23, r19
 890:	84 0b       	sbc	r24, r20
 892:	ba 0b       	sbc	r27, r26
 894:	ee 1f       	adc	r30, r30
 896:	88 f7       	brcc	.-30     	; 0x87a <__divsf3_pse+0x90>
 898:	e0 95       	com	r30
 89a:	08 95       	ret

0000089c <__floatunsisf>:
 89c:	e8 94       	clt
 89e:	09 c0       	rjmp	.+18     	; 0x8b2 <__floatsisf+0x12>

000008a0 <__floatsisf>:
 8a0:	97 fb       	bst	r25, 7
 8a2:	3e f4       	brtc	.+14     	; 0x8b2 <__floatsisf+0x12>
 8a4:	90 95       	com	r25
 8a6:	80 95       	com	r24
 8a8:	70 95       	com	r23
 8aa:	61 95       	neg	r22
 8ac:	7f 4f       	sbci	r23, 0xFF	; 255
 8ae:	8f 4f       	sbci	r24, 0xFF	; 255
 8b0:	9f 4f       	sbci	r25, 0xFF	; 255
 8b2:	99 23       	and	r25, r25
 8b4:	a9 f0       	breq	.+42     	; 0x8e0 <__floatsisf+0x40>
 8b6:	f9 2f       	mov	r31, r25
 8b8:	96 e9       	ldi	r25, 0x96	; 150
 8ba:	bb 27       	eor	r27, r27
 8bc:	93 95       	inc	r25
 8be:	f6 95       	lsr	r31
 8c0:	87 95       	ror	r24
 8c2:	77 95       	ror	r23
 8c4:	67 95       	ror	r22
 8c6:	b7 95       	ror	r27
 8c8:	f1 11       	cpse	r31, r1
 8ca:	f8 cf       	rjmp	.-16     	; 0x8bc <__floatsisf+0x1c>
 8cc:	fa f4       	brpl	.+62     	; 0x90c <__floatsisf+0x6c>
 8ce:	bb 0f       	add	r27, r27
 8d0:	11 f4       	brne	.+4      	; 0x8d6 <__floatsisf+0x36>
 8d2:	60 ff       	sbrs	r22, 0
 8d4:	1b c0       	rjmp	.+54     	; 0x90c <__floatsisf+0x6c>
 8d6:	6f 5f       	subi	r22, 0xFF	; 255
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	8f 4f       	sbci	r24, 0xFF	; 255
 8dc:	9f 4f       	sbci	r25, 0xFF	; 255
 8de:	16 c0       	rjmp	.+44     	; 0x90c <__floatsisf+0x6c>
 8e0:	88 23       	and	r24, r24
 8e2:	11 f0       	breq	.+4      	; 0x8e8 <__floatsisf+0x48>
 8e4:	96 e9       	ldi	r25, 0x96	; 150
 8e6:	11 c0       	rjmp	.+34     	; 0x90a <__floatsisf+0x6a>
 8e8:	77 23       	and	r23, r23
 8ea:	21 f0       	breq	.+8      	; 0x8f4 <__floatsisf+0x54>
 8ec:	9e e8       	ldi	r25, 0x8E	; 142
 8ee:	87 2f       	mov	r24, r23
 8f0:	76 2f       	mov	r23, r22
 8f2:	05 c0       	rjmp	.+10     	; 0x8fe <__floatsisf+0x5e>
 8f4:	66 23       	and	r22, r22
 8f6:	71 f0       	breq	.+28     	; 0x914 <__floatsisf+0x74>
 8f8:	96 e8       	ldi	r25, 0x86	; 134
 8fa:	86 2f       	mov	r24, r22
 8fc:	70 e0       	ldi	r23, 0x00	; 0
 8fe:	60 e0       	ldi	r22, 0x00	; 0
 900:	2a f0       	brmi	.+10     	; 0x90c <__floatsisf+0x6c>
 902:	9a 95       	dec	r25
 904:	66 0f       	add	r22, r22
 906:	77 1f       	adc	r23, r23
 908:	88 1f       	adc	r24, r24
 90a:	da f7       	brpl	.-10     	; 0x902 <__floatsisf+0x62>
 90c:	88 0f       	add	r24, r24
 90e:	96 95       	lsr	r25
 910:	87 95       	ror	r24
 912:	97 f9       	bld	r25, 7
 914:	08 95       	ret

00000916 <__fp_inf>:
 916:	97 f9       	bld	r25, 7
 918:	9f 67       	ori	r25, 0x7F	; 127
 91a:	80 e8       	ldi	r24, 0x80	; 128
 91c:	70 e0       	ldi	r23, 0x00	; 0
 91e:	60 e0       	ldi	r22, 0x00	; 0
 920:	08 95       	ret

00000922 <__fp_nan>:
 922:	9f ef       	ldi	r25, 0xFF	; 255
 924:	80 ec       	ldi	r24, 0xC0	; 192
 926:	08 95       	ret

00000928 <__fp_pscA>:
 928:	00 24       	eor	r0, r0
 92a:	0a 94       	dec	r0
 92c:	16 16       	cp	r1, r22
 92e:	17 06       	cpc	r1, r23
 930:	18 06       	cpc	r1, r24
 932:	09 06       	cpc	r0, r25
 934:	08 95       	ret

00000936 <__fp_pscB>:
 936:	00 24       	eor	r0, r0
 938:	0a 94       	dec	r0
 93a:	12 16       	cp	r1, r18
 93c:	13 06       	cpc	r1, r19
 93e:	14 06       	cpc	r1, r20
 940:	05 06       	cpc	r0, r21
 942:	08 95       	ret

00000944 <__fp_round>:
 944:	09 2e       	mov	r0, r25
 946:	03 94       	inc	r0
 948:	00 0c       	add	r0, r0
 94a:	11 f4       	brne	.+4      	; 0x950 <__fp_round+0xc>
 94c:	88 23       	and	r24, r24
 94e:	52 f0       	brmi	.+20     	; 0x964 <__fp_round+0x20>
 950:	bb 0f       	add	r27, r27
 952:	40 f4       	brcc	.+16     	; 0x964 <__fp_round+0x20>
 954:	bf 2b       	or	r27, r31
 956:	11 f4       	brne	.+4      	; 0x95c <__fp_round+0x18>
 958:	60 ff       	sbrs	r22, 0
 95a:	04 c0       	rjmp	.+8      	; 0x964 <__fp_round+0x20>
 95c:	6f 5f       	subi	r22, 0xFF	; 255
 95e:	7f 4f       	sbci	r23, 0xFF	; 255
 960:	8f 4f       	sbci	r24, 0xFF	; 255
 962:	9f 4f       	sbci	r25, 0xFF	; 255
 964:	08 95       	ret

00000966 <__fp_split3>:
 966:	57 fd       	sbrc	r21, 7
 968:	90 58       	subi	r25, 0x80	; 128
 96a:	44 0f       	add	r20, r20
 96c:	55 1f       	adc	r21, r21
 96e:	59 f0       	breq	.+22     	; 0x986 <__fp_splitA+0x10>
 970:	5f 3f       	cpi	r21, 0xFF	; 255
 972:	71 f0       	breq	.+28     	; 0x990 <__fp_splitA+0x1a>
 974:	47 95       	ror	r20

00000976 <__fp_splitA>:
 976:	88 0f       	add	r24, r24
 978:	97 fb       	bst	r25, 7
 97a:	99 1f       	adc	r25, r25
 97c:	61 f0       	breq	.+24     	; 0x996 <__fp_splitA+0x20>
 97e:	9f 3f       	cpi	r25, 0xFF	; 255
 980:	79 f0       	breq	.+30     	; 0x9a0 <__fp_splitA+0x2a>
 982:	87 95       	ror	r24
 984:	08 95       	ret
 986:	12 16       	cp	r1, r18
 988:	13 06       	cpc	r1, r19
 98a:	14 06       	cpc	r1, r20
 98c:	55 1f       	adc	r21, r21
 98e:	f2 cf       	rjmp	.-28     	; 0x974 <__fp_split3+0xe>
 990:	46 95       	lsr	r20
 992:	f1 df       	rcall	.-30     	; 0x976 <__fp_splitA>
 994:	08 c0       	rjmp	.+16     	; 0x9a6 <__fp_splitA+0x30>
 996:	16 16       	cp	r1, r22
 998:	17 06       	cpc	r1, r23
 99a:	18 06       	cpc	r1, r24
 99c:	99 1f       	adc	r25, r25
 99e:	f1 cf       	rjmp	.-30     	; 0x982 <__fp_splitA+0xc>
 9a0:	86 95       	lsr	r24
 9a2:	71 05       	cpc	r23, r1
 9a4:	61 05       	cpc	r22, r1
 9a6:	08 94       	sec
 9a8:	08 95       	ret

000009aa <__fp_zero>:
 9aa:	e8 94       	clt

000009ac <__fp_szero>:
 9ac:	bb 27       	eor	r27, r27
 9ae:	66 27       	eor	r22, r22
 9b0:	77 27       	eor	r23, r23
 9b2:	cb 01       	movw	r24, r22
 9b4:	97 f9       	bld	r25, 7
 9b6:	08 95       	ret

000009b8 <__gesf2>:
 9b8:	03 d0       	rcall	.+6      	; 0x9c0 <__fp_cmp>
 9ba:	08 f4       	brcc	.+2      	; 0x9be <__gesf2+0x6>
 9bc:	8f ef       	ldi	r24, 0xFF	; 255
 9be:	08 95       	ret

000009c0 <__fp_cmp>:
 9c0:	99 0f       	add	r25, r25
 9c2:	00 08       	sbc	r0, r0
 9c4:	55 0f       	add	r21, r21
 9c6:	aa 0b       	sbc	r26, r26
 9c8:	e0 e8       	ldi	r30, 0x80	; 128
 9ca:	fe ef       	ldi	r31, 0xFE	; 254
 9cc:	16 16       	cp	r1, r22
 9ce:	17 06       	cpc	r1, r23
 9d0:	e8 07       	cpc	r30, r24
 9d2:	f9 07       	cpc	r31, r25
 9d4:	c0 f0       	brcs	.+48     	; 0xa06 <__fp_cmp+0x46>
 9d6:	12 16       	cp	r1, r18
 9d8:	13 06       	cpc	r1, r19
 9da:	e4 07       	cpc	r30, r20
 9dc:	f5 07       	cpc	r31, r21
 9de:	98 f0       	brcs	.+38     	; 0xa06 <__fp_cmp+0x46>
 9e0:	62 1b       	sub	r22, r18
 9e2:	73 0b       	sbc	r23, r19
 9e4:	84 0b       	sbc	r24, r20
 9e6:	95 0b       	sbc	r25, r21
 9e8:	39 f4       	brne	.+14     	; 0x9f8 <__fp_cmp+0x38>
 9ea:	0a 26       	eor	r0, r26
 9ec:	61 f0       	breq	.+24     	; 0xa06 <__fp_cmp+0x46>
 9ee:	23 2b       	or	r18, r19
 9f0:	24 2b       	or	r18, r20
 9f2:	25 2b       	or	r18, r21
 9f4:	21 f4       	brne	.+8      	; 0x9fe <__fp_cmp+0x3e>
 9f6:	08 95       	ret
 9f8:	0a 26       	eor	r0, r26
 9fa:	09 f4       	brne	.+2      	; 0x9fe <__fp_cmp+0x3e>
 9fc:	a1 40       	sbci	r26, 0x01	; 1
 9fe:	a6 95       	lsr	r26
 a00:	8f ef       	ldi	r24, 0xFF	; 255
 a02:	81 1d       	adc	r24, r1
 a04:	81 1d       	adc	r24, r1
 a06:	08 95       	ret

00000a08 <_exit>:
 a08:	f8 94       	cli

00000a0a <__stop_program>:
 a0a:	ff cf       	rjmp	.-2      	; 0xa0a <__stop_program>
